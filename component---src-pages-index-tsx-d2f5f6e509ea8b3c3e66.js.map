{"version":3,"sources":["webpack:///./src/components/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./src/pages/index.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Header","props","siteTitle","className","to","Layout","children","data","css","site","siteMetadata","title","IndexPage","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"iJAgBeA,EATA,SAACC,GAAuB,IAC7BC,EAAcD,EAAdC,UACR,OACE,sBAAQC,UAAU,mFAChB,YAAC,IAAD,CAAMC,GAAG,KAAKF,K,+KCoCLG,IAlCA,SAACJ,GAAuB,IAC7BK,EAAaL,EAAbK,SACFC,EAAO,OAUb,OACE,mBACEJ,UAAU,UACVK,IAAG,GAaH,YAAC,EAAD,CAAQN,UAAWK,EAAKE,KAAKC,aAAaC,QAC1C,oBAAMR,UAAU,yBAAyBG,M,wIC1C/C,mEAwCeM,UAhCG,WAChB,OACE,YAAC,IAAD,KACE,iBAAGT,UAAU,QAAb,sCAGA,iBAAGA,UAAU,0BAAb,YACA,YAAC,IAAD,CACEC,GAAG,QACHD,UAAU,4IAFZ,gBAMA,kBAAIA,UAAU,0BAAd,aACA,6FAGE,uBACA,uBAJF,4FAOE,uBACA,uBARF,mFAUE,uBACA,uBAXF,iD,kCCtBN,iKAcyBU,UAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-index-tsx-d2f5f6e509ea8b3c3e66.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\ntype HeaderProps = {\n  siteTitle: string;\n};\n\nconst Header = (props: HeaderProps) => {\n  const { siteTitle } = props;\n  return (\n    <header className='text-gray-900 font-bold px-4 py-5 text-2xl md:text-4xl md:px-8 md:py-8 xl:px-16'>\n      <Link to='/'>{siteTitle}</Link>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\n// サードパーティーライブラリ\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { css } from '@emotion/core';\n\n// 自作コンポーネント\nimport Header from './header';\n\ntype LayoutProps = {\n  children?: React.ReactNode;\n};\n\nconst Layout = (props: LayoutProps) => {\n  const { children } = props;\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <div\n      className='mx-auto'\n      css={css`\n        max-width: 400px;\n        @media (min-width: 768px) {\n          max-width: 768px;\n        }\n        @media (min-width: 1024px) {\n          max-width: 1024px;\n        }\n        @media (min-width: 1280px) {\n          max-width: 1280px;\n        }\n      `}\n    >\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <main className='px-4 md:px-8 xl:px-16'>{children}</main>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport '../styles/tailwind.css';\n\nimport { Link } from 'gatsby';\n\n// 自作コンポーネント\nimport Layout from '../components/layout';\n\nconst IndexPage = () => {\n  return (\n    <Layout>\n      <p className='mb-8'>\n        「まんがタイムきらら」に連載された作品の掲載順をグラフ化し表示します\n      </p>\n      <p className='mb-4 text-xl font-bold'>スマホでみてネ！</p>\n      <Link\n        to='/app/'\n        className='text-center inline-block min-w-full bg-green-500 text-white py-3 mb-8 rounded text-xl focus:bg-green-600 xl:min-w-0 xl:px-8 xl:text-base'\n      >\n        Get Started！\n      </Link>\n      <h2 className='mb-4 text-xl font-bold'>このサイトについて</h2>\n      <p>\n        このサイトは、プロラボ春ハッカソンで作られた、Kirara\n        Orderのプロトタイプ版です。 正式版は1、2ヶ月後にきっと出ると思います。\n        <br />\n        <br />\n        Kirara\n        Orderとは、「まんがタイムきらら」に連載された作品の掲載順をグラフ化し表示するサイトのことです。詳しくはエントリーと同時に投稿したブログの記事を読んでください。\n        <br />\n        <br />\n        このプロトタイプ版では、きららMAXに連載された作品の中から独断と偏見で選んだ13作品の、2018年の1月号~2020年の5月号までの掲載順をグラフ化できます。\n        <br />\n        <br />\n        なおこのプロトタイプ版は、予告なく公開を停止する可能性があります。いやきっとします。\n      </p>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}